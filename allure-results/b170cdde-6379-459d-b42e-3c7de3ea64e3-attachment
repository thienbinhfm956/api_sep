# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: API: C·∫≠p nh·∫≠t tr·∫°ng th√°i v·∫≠n ƒë∆°n OnWheel >> 011 - C·∫≠p nh·∫≠t tr·∫°ng th√°i v·∫≠n ƒë∆°n th√†nh c√¥ng v·ªõi DeliveryNo h·ª£p l·ªá
- Location: D:\Automation-API\tests\04-onwheel.spec.ts:54:7

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 405
    at D:\Automation-API\tests\04-onwheel.spec.ts:62:31
```

# Test source

```ts
   1 | // tests/logistics-onwheel.spec.ts
   2 | import { test, expect, request } from '@playwright/test';
   3 | import { LogisticsOnWheelApi,CreateOnWheelApi,UpdateOnWheelStatusApi } from '../pom/04-onwheel.pom';
   4 |
   5 | test.describe('API: OnWheel - Danh s√°ch ƒë∆°n ƒëang giao', () => {
   6 |   test('009 - L·∫•y to√†n b·ªô danh s√°ch ƒë∆°n h√†ng OnWheel theo ng√†y v√† branch', async () => {
   7 |     const context = await request.newContext();
   8 |     const logisticsApi = new LogisticsOnWheelApi(context);
   9 |
  10 |     const response = await logisticsApi.getOnWheelList();
  11 |     const json = await response.json();
  12 |
  13 |     console.log('üì¶ K·∫øt qu·∫£ tr·∫£ v·ªÅ:', json);
  14 |
  15 |     // ‚úÖ Ki·ªÉm tra HTTP status code
  16 |     expect(response.status()).toBe(200);
  17 |
  18 |     // ‚úÖ Ki·ªÉm tra response body chu·∫©n
  19 |     expect(json).toHaveProperty('IsSuccess', true);
  20 |     expect(json).toHaveProperty('HttpStatusCode', 200);
  21 |     expect(json).toHaveProperty('Data');
  22 |     expect(Array.isArray(json.Data)).toBe(true);
  23 |     expect(json.Data.length).toBeGreaterThan(0);
  24 |
  25 |     // ‚úÖ Ki·ªÉm tra m·ªôt ph·∫ßn t·ª≠ trong m·∫£ng
  26 |     const item = json.Data[0];
  27 |     expect(item).toHaveProperty('DeliveryNo');
  28 |     expect(item).toHaveProperty('AutoCode');
  29 |     expect(item).toHaveProperty('Status');
  30 |     expect(['ASSIGNING', 'COMPLETED', 'CANCELLED', 'ACCEPTED']).toContain(item.Status);
  31 |   });
  32 | });
  33 |
  34 | test.describe('API: T·∫°o ƒë∆°n h√†ng giao OnWheel', () => {
  35 |   test('010 - T·∫°o ƒë∆°n giao h√†ng OnWheel th√†nh c√¥ng', async () => {
  36 |     const requestContext = await request.newContext();
  37 |     const createApi = new CreateOnWheelApi(requestContext);
  38 |
  39 |     const response = await createApi.createOnWheelOrder();
  40 |     const json = await response.json();
  41 |
  42 |     console.log('üì¶ K·∫øt qu·∫£ t·∫°o ƒë∆°n:', json);
  43 |
  44 |     // ‚úÖ Ki·ªÉm tra ph·∫£n h·ªìi th√†nh c√¥ng
  45 |     expect(response.status()).toBe(200);
  46 |     expect(json).toHaveProperty('IsSuccess', true);
  47 |     expect(json).toHaveProperty('HttpStatusCode', 200);
  48 |     expect(json.Error).toBeNull();
  49 |     expect(json.Data).toBeNull(); // V√¨ Data = null khi t·∫°o th√†nh c√¥ng
  50 |   });
  51 | });
  52 |
  53 | test.describe('API: C·∫≠p nh·∫≠t tr·∫°ng th√°i v·∫≠n ƒë∆°n OnWheel', () => {
  54 |   test('011 - C·∫≠p nh·∫≠t tr·∫°ng th√°i v·∫≠n ƒë∆°n th√†nh c√¥ng v·ªõi DeliveryNo h·ª£p l·ªá', async () => {
  55 |     const context = await request.newContext();
  56 |     const api = new UpdateOnWheelStatusApi(context);
  57 |
  58 |     const deliveryNo = '25G7QHLV'; // üîÅ M√£ v·∫≠n ƒë∆°n t·ª´ th·ª±c t·∫ø
  59 |     const response = await api.updateStatus(deliveryNo);
  60 |
  61 |     // ‚úÖ Ki·ªÉm tra HTTP status
> 62 |     expect(response.status()).toBe(200);
     |                               ^ Error: expect(received).toBe(expected) // Object.is equality
  63 |
  64 |     // ‚úÖ Parse JSON an to√†n
  65 |     let json;
  66 |     try {
  67 |       json = await response.json();
  68 |     } catch (e) {
  69 |       const raw = await response.text();
  70 |       console.error('‚ùå Kh√¥ng parse ƒë∆∞·ª£c JSON, raw response:', raw);
  71 |       throw new Error('L·ªói khi parse JSON t·ª´ response.');
  72 |     }
  73 |
  74 |     console.log('üì¶ K·∫øt qu·∫£ c·∫≠p nh·∫≠t v·∫≠n ƒë∆°n:', json);
  75 |
  76 |     // ‚úÖ Ki·ªÉm tra gi√° tr·ªã JSON tr·∫£ v·ªÅ
  77 |     expect(json).toHaveProperty('HttpStatusCode', 200);
  78 |     expect(json).toHaveProperty('IsSuccess', true);
  79 |     expect(json).toHaveProperty('Message', 'L·∫•y th√¥ng tin v·∫≠n ƒë∆°n th√†nh c√¥ng!');
  80 |     expect(json).toHaveProperty('Data', false);
  81 |     expect(json).toHaveProperty('Error', null);
  82 |   });
  83 | });
```