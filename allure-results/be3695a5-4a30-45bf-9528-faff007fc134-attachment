# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: API: OnWheel - Danh s√°ch ƒë∆°n ƒëang giao >> 009 - L·∫•y to√†n b·ªô danh s√°ch ƒë∆°n h√†ng OnWheel theo ng√†y v√† branch
- Location: D:\Automation-API\tests\04-onwheel.spec.ts:6:7

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 400
    at D:\Automation-API\tests\04-onwheel.spec.ts:16:31
```

# Test source

```ts
   1 | // tests/logistics-onwheel.spec.ts
   2 | import { test, expect, request } from '@playwright/test';
   3 | import { LogisticsOnWheelApi,CreateOnWheelApi,UpdateOnWheelStatusApi,CheckShipmentMergeApi } from '../pom/04-onwheel.pom';
   4 |
   5 | test.describe('API: OnWheel - Danh s√°ch ƒë∆°n ƒëang giao', () => {
   6 |   test('009 - L·∫•y to√†n b·ªô danh s√°ch ƒë∆°n h√†ng OnWheel theo ng√†y v√† branch', async () => {
   7 |     const context = await request.newContext();
   8 |     const logisticsApi = new LogisticsOnWheelApi(context);
   9 |
   10 |     const response = await logisticsApi.getOnWheelList();
   11 |     const json = await response.json();
   12 |
   13 |     console.log('üì¶ K·∫øt qu·∫£ tr·∫£ v·ªÅ:', json);
   14 |
   15 |     // ‚úÖ Ki·ªÉm tra HTTP status code
>  16 |     expect(response.status()).toBe(200);
      |                               ^ Error: expect(received).toBe(expected) // Object.is equality
   17 |
   18 |     // ‚úÖ Ki·ªÉm tra response body chu·∫©n
   19 |     expect(json).toHaveProperty('IsSuccess', true);
   20 |     expect(json).toHaveProperty('HttpStatusCode', 200);
   21 |     expect(json).toHaveProperty('Data');
   22 |     expect(Array.isArray(json.Data)).toBe(true);
   23 |     expect(json.Data.length).toBeGreaterThan(0);
   24 |
   25 |     // ‚úÖ Ki·ªÉm tra m·ªôt ph·∫ßn t·ª≠ trong m·∫£ng
   26 |     const item = json.Data[0];
   27 |     expect(item).toHaveProperty('DeliveryNo');
   28 |     expect(item).toHaveProperty('AutoCode');
   29 |     expect(item).toHaveProperty('Status');
   30 |     expect(['ASSIGNING', 'COMPLETED', 'CANCELLED', 'ACCEPTED']).toContain(item.Status);
   31 |   });
   32 | });
   33 |
   34 | test.describe('API: T·∫°o ƒë∆°n h√†ng giao OnWheel', () => {
   35 |   test('010 - T·∫°o ƒë∆°n giao h√†ng OnWheel th√†nh c√¥ng', async () => {
   36 |     const requestContext = await request.newContext();
   37 |     const createApi = new CreateOnWheelApi(requestContext);
   38 |
   39 |     const response = await createApi.createOnWheelOrder();
   40 |     const json = await response.json();
   41 |
   42 |     console.log('üì¶ K·∫øt qu·∫£ t·∫°o ƒë∆°n:', json);
   43 |
   44 |     // ‚úÖ Ki·ªÉm tra ph·∫£n h·ªìi th√†nh c√¥ng
   45 |     expect(response.status()).toBe(200);
   46 |     expect(json).toHaveProperty('IsSuccess', true);
   47 |     expect(json).toHaveProperty('HttpStatusCode', 200);
   48 |     expect(json.Error).toBeNull();
   49 |     expect(json.Data).toBeNull(); // V√¨ Data = null khi t·∫°o th√†nh c√¥ng
   50 |   });
   51 | });
   52 |
   53 | test.describe('API: C·∫≠p nh·∫≠t tr·∫°ng th√°i v·∫≠n ƒë∆°n OnWheel', () => {
   54 |   test('011 - C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng v·ªõi m√£ v·∫≠n ƒë∆°n h·ª£p l·ªá', async () => {
   55 |     const requestContext = await request.newContext();
   56 |     const api = new UpdateOnWheelStatusApi(requestContext);
   57 |
   58 |     const deliveryNo = '25G7QHLV'; // üîÅ M√£ v·∫≠n ƒë∆°n th·∫≠t t·ª´ m√¥i tr∆∞·ªùng
   59 |     const response = await api.updateStatus(deliveryNo);
   60 |
   61 |     expect(response.status()).toBe(200);
   62 |
   63 |     const body = await response.json();
   64 |     console.log('üì¶ Response JSON:', body);
   65 |
   66 |     // ‚úÖ Ki·ªÉm tra n·ªôi dung JSON ƒë√∫ng ƒë·ªãnh d·∫°ng v√† gi√° tr·ªã
   67 |     expect(body).toMatchObject({
   68 |       HttpStatusCode: 200,
   69 |       IsSuccess: true,
   70 |       Message: 'L·∫•y th√¥ng tin v·∫≠n ƒë∆°n th√†nh c√¥ng!',
   71 |       Data: false,
   72 |       Error: null
   73 |     });
   74 |   });
   75 | });
   76 |
   77 | test.describe('API: Ki·ªÉm tra c√≥ th·ªÉ g·ªôp ƒë∆°n giao kh√¥ng', () => {
   78 |   test('012 - L·∫•y to√†n b·ªô Danh s√°ch ƒë∆°n c√≥ th·ªÉ gh√©p chuy·∫øn OnWheel', async () => {
   79 |     const requestContext = await request.newContext();
   80 |     const api = new CheckShipmentMergeApi(requestContext);
   81 |
   82 |     const response = await api.checkCanMerge();
   83 |     expect(response.status()).toBe(200);
   84 |
   85 |     const result = await response.json();
   86 |     console.log('üì¶ Merge Check Response:', result);
   87 |
   88 |     // ‚úÖ Ki·ªÉm tra ph·∫£n h·ªìi h·ª£p l·ªá
   89 |     expect(result).toMatchObject({
   90 |       HttpStatusCode: 200,
   91 |       IsSuccess: true,
   92 |       Error: null
   93 |     });
   94 |
   95 |     // ‚úÖ Ki·ªÉm tra danh s√°ch tr·∫£ v·ªÅ c√≥ √≠t nh·∫•t 1 ƒë∆°n
   96 |     expect(Array.isArray(result.Data)).toBe(true);
   97 |     expect(result.Data.length).toBeGreaterThan(0);
   98 |
   99 |     // ‚úÖ Ki·ªÉm tra 1 ƒë∆°n trong danh s√°ch c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin
  100 |     const sample = result.Data[0];
  101 |     expect(sample).toHaveProperty('OrderId');
  102 |     expect(sample).toHaveProperty('Distance');
  103 |     expect(sample).toHaveProperty('DriverName');
  104 |     expect(sample).toHaveProperty('Ratio');
  105 |   });
  106 | });
```